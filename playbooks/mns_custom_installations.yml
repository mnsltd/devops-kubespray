- name: Custom installations for MNS
  hosts: kube_control_plane
  gather_facts: False
  become: true
  tasks:
    - name: Add NFS subdir external provisioner Helm repo
      kubernetes.core.helm_repository:
        name: nfs-subdir-external-provisioner
        binary_path: "{{ bin_dir }}/helm"
        repo_url: https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/
    - name: Install NFS subdir external provisioner using Helm
      kubernetes.core.helm:
        name: nfs-subdir-external-provisioner-default
        binary_path: "{{ bin_dir }}/helm"
        chart_ref: nfs-subdir-external-provisioner/nfs-subdir-external-provisioner
        release_namespace: default
        values:
          nfs:
            server: dev-newsan.mns.intra-mns.mu
            path: /DEV_NFS_DATA
          storageClass:
            name: nfs-new
            defaultClass: true

    - name: Create Traefik namespace
      kubernetes.core.k8s:
        name: traefik
        api_version: v1
        kind: Namespace
        state: present
    - name: Add Traefik Helm repo
      kubernetes.core.helm_repository:
        name: traefik
        binary_path: "{{ bin_dir }}/helm"
        repo_url: https://traefik.github.io/charts
    - name: Install Traefik using Helm
      kubernetes.core.helm:
        name: traefik
        binary_path: "{{ bin_dir }}/helm"
        chart_ref: traefik/traefik
        release_namespace: traefik
        values:
          dashboard:
            enabled: true
            domain: traefik.intra-mns.mu
            auth:
              basic:
                admin: $2y$05$kpCJY2gJWlgG5CUs5tdPx.2xGJ4xyqhWtjiiM/NKfHmj3pfUPsap2
          ssl:
            enabled: true
            enforced: true
            permanentRedirect: true
            generateTLS: true
            defaultCN: "*intra-mns.mu"
          service:
            externalIPs: [ 192.168.84.181 ]
          deployment:
            replicas: 2

    - name: Define storage space for Jenkins
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: jenkins-pvc
            namespace: default
          spec:
            accessModes:
              - ReadWriteOnce
            storageClassName: nfs-new
            resources:
              requests:
                storage: 100Gi
    - name: Add Jenkins Helm repo
      kubernetes.core.helm_repository:
        name: jenkins
        binary_path: "{{ bin_dir }}/helm"
        repo_url: https://charts.jenkins.io
    - name: Install Jenkins using Helm
      kubernetes.core.helm:
        name: jenkins
        binary_path: "{{ bin_dir }}/helm"
        chart_ref: jenkins/jenkins
        release_namespace: default
        values:
          persistence:
            existingClaim: jenkins-pvc
          controller:
            numExecutors: 5
            overwritePlugins: true
            ingress:
              enabled: true
              hostName: jenkins.intra-mns.mu
              annotations:
                kubernetes.io/ingress.class: traefik

    - name: Create Monitoring namespace
      kubernetes.core.k8s:
        name: monitoring
        api_version: v1
        kind: Namespace
        state: present
    - name: Define storage space for Prometheus
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: prometheus-pvc
            namespace: monitoring
          spec:
            accessModes:
              - ReadWriteOnce
            storageClassName: nfs-new
            resources:
              requests:
                storage: 20Gi
    - name: Add Prometheus Helm repo
      kubernetes.core.helm_repository:
        name: prometheus-community
        binary_path: "{{ bin_dir }}/helm"
        repo_url: https://prometheus-community.github.io/helm-charts
    - name: Install Prometheus using Helm
      kubernetes.core.helm:
        name: prometheus-community
        binary_path: "{{ bin_dir }}/helm"
        chart_ref: prometheus-community/prometheus
        release_namespace: monitoring
        values:
          server:
            ingress:
              enabled: true
              hosts:
                - prometheus.intra-mns.mu
            persistentVolume:
              existingClaim: prometheus-pvc

    - name: Define storage space for Grafana
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: grafana-pvc
            namespace: monitoring
          spec:
            accessModes:
              - ReadWriteOnce
            storageClassName: nfs-new
            resources:
              requests:
                storage: 10Gi
    - name: Add Grafana Helm repo
      kubernetes.core.helm_repository:
        name: grafana
        binary_path: "{{ bin_dir }}/helm"
        repo_url: https://grafana.github.io/helm-charts
    - name: Install Grafana using Helm
      kubernetes.core.helm:
        name: grafana
        binary_path: "{{ bin_dir }}/helm"
        chart_ref: grafana/grafana
        release_namespace: monitoring
        values:
          persistentVolume:
            existingClaim: grafana-pvc

    - name: Create Elastic-system namespace
      kubernetes.core.k8s:
        name: elastic-system
        api_version: v1
        kind: Namespace
        state: present
    - name: Download Elastic CRD YAML
      get_url:
        url: https://download.elastic.co/downloads/eck/2.8.0/crds.yaml
        dest: /tmp/crds.yaml
    - name: Create Elastic CRDs in elastic-system namespace
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '/tmp/crds.yaml') }}"
        namespace: elastic-system
    - name: Download Elastic Operator YAML
      get_url:
        url: https://download.elastic.co/downloads/eck/2.8.0/operator.yaml
        dest: /tmp/operator.yaml
    - name: Create Elastic Operator in elastic-system namespace
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '/tmp/operator.yaml') }}"
        namespace: elastic-system
    - name: Download Elastic values YAML
      get_url:
        url:  https://raw.githubusercontent.com/mnsltd/devops-kubespray/master/playbooks/efk/elastic_values.yml
        dest: /tmp/elastic_values.yml
    - name: Apply Elasticsearch configuration
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '/tmp/elastic_values.yml') }}"
        namespace: elastic-system
    - name: Download Kibana values YAML
      get_url:
        url:  https://raw.githubusercontent.com/mnsltd/devops-kubespray/master/playbooks/efk/kibana.yml
        dest: /tmp/kibana.yml
    - name: Apply Kibana configuration
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '/tmp/kibana.yml') }}"
        namespace: elastic-system
    - name: Download Filebeat values YAML
      get_url:
        url:  https://raw.githubusercontent.com/mnsltd/devops-kubespray/master/playbooks/efk/filebeat.yml
        dest: /tmp/filebeat.yml
    - name: Apply Filebeat configuration
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '/tmp/filebeat.yml') }}"
        namespace: elastic-system
    - name: Download Logstash values YAML
      get_url:
        url:  https://raw.githubusercontent.com/mnsltd/devops-kubespray/master/playbooks/efk/logstash.yml
        dest: /tmp/logstash.yml
    - name: Apply Logstash configuration
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '/tmp/logstash.yml') }}"
        namespace: elastic-system

    - name: Create mns-com-dev namespace
      kubernetes.core.k8s:
        name: mns-com-dev
        api_version: v1
        kind: Namespace
        state: present
    - name: Add RabbitMQ Helm repository
      kubernetes.core.helm_repository:
        name: rabbitmq-cluster-operator
        binary_path: "{{ bin_dir }}/helm"
        repo_url: https://adeptia.github.io/rabbitmq-cluster-operator-helm-package/charts/
    - name: Install RabbitMQ Cluster Operator
      kubernetes.core.helm:
        name: rabbitmq-cluster-operator
        chart_ref: rabbitmq-cluster-operator/rabbitmq-cluster-operator
        release_namespace: mns-com-dev
        binary_path: "{{ bin_dir }}/helm"
    - name: Download RabbitMQ values YAML
      get_url:
        url: https://raw.githubusercontent.com/mnsltd/devops-kubespray/master/playbooks/rabbitmq/rabbitmq.yml
        dest: /tmp/rabbitmq.yml
    - name: Apply RabbitMQ configuration
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '/tmp/rabbitmq.yml') }}"
        namespace: mns-com-dev
    - name: Download Pod Disruption values YAML
      get_url:
        url: https://raw.githubusercontent.com/mnsltd/devops-kubespray/master/playbooks/rabbitmq/pod-disruption-budget.yml
        dest: /tmp/pod-disruption-budget.yml
    - name: Apply Pod Disruption configuration
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '/tmp/pod-disruption-budget.yml') }}"
        namespace: mns-com-dev

    - name: Create mns-com-test namespace
      kubernetes.core.k8s:
        name: mns-com-test
        api_version: v1
        kind: Namespace
        state: present
    - name: Install RabbitMQ Cluster Operator
      kubernetes.core.helm:
        name: rabbitmq-cluster-operator-test
        chart_ref: rabbitmq-cluster-operator/rabbitmq-cluster-operator
        release_namespace: mns-com-test
        binary_path: "{{ bin_dir }}/helm"
    - name: Apply RabbitMQ configuration
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '/tmp/rabbitmq.yml') }}"
        namespace: mns-com-test
    - name: Apply Pod Disruption configuration
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '/tmp/pod-disruption-budget.yml') }}"
        namespace: mns-com-test

    - name: Add Hazelcast Helm repository
      kubernetes.core.helm_repository:
        name: hazelcast
        binary_path: "{{ bin_dir }}/helm"
        repo_url: https://hazelcast-charts.s3.amazonaws.com/
    - name: Install Hazelcast Cluster
      kubernetes.core.helm:
        name: hazelcast
        chart_ref: hazelcast/hazelcast
        release_namespace: mns-com-dev
        binary_path: "{{ bin_dir }}/helm"
        values:
          cluster:
            memberCount: 3
          metrics:
            enabled: true
    - name: Install Hazelcast Cluster
      kubernetes.core.helm:
        name: hazelcast
        chart_ref: hazelcast/hazelcast
        release_namespace: mns-com-test
        binary_path: "{{ bin_dir }}/helm"
        values:
          cluster:
            memberCount: 3
          metrics:
            enabled: true

    - name: Create signoz namespace
      kubernetes.core.k8s:
        name: signoz
        api_version: v1
        kind: Namespace
        state: present
    - name: Add Signoz Helm repo
      kubernetes.core.helm_repository:
        name: signoz
        binary_path: "{{ bin_dir }}/helm"
        repo_url: https://charts.signoz.io
    - name: Install Signoz using Helm
      kubernetes.core.helm:
        name: signoz
        binary_path: "{{ bin_dir }}/helm"
        chart_ref: signoz/signoz
        release_namespace: signoz
        values:
          k8s-infra:
            # -- Whether to enable K8s infra monitoring
            enabled: false
          global:
            storageClass: nfs-new
          clickhouse:
            persistence:
              storageClass: nfs-new
              size: 50Gi
          queryService:
            cache:
              config:
                inmemory:
                  ttl: 24h
            persistence:
              storageClass: nfs-new
          alermanager:
            persistence:
              storageClass: nfs-new
          otelCollector:
            config:
              processors:
                memory_limiter:
                  check_interval: 60s
                  limit_mib: 2000
                k8sattributes/hostmetrics:
                  # -- Whether to detect the IP address of agents and add it as an attribute to all telemetry resources.
                  # If set to true, Agents will not make any k8s API calls, do any discovery of pods or extract any metadata.
                  passthrough: false
                  # -- Filters can be used to limit each OpenTelemetry agent to query pods based on specific
                  # selector to only dramatically reducing resource requirements for very large clusters.
                  filter:
                    # -- Restrict each OpenTelemetry agent to query pods running on the same node
                    node_from_env_var: K8S_NODE_NAME
                  pod_association:
                    - sources:
                        - from: resource_attribute
                          name: k8s.pod.ip
                    - sources:
                        - from: resource_attribute
                          name: k8s.pod.uid
                    - sources:
                        - from: connection
                  extract:
                    metadata:
                      - k8s.namespace.name
                      - k8s.pod.name
                      - k8s.pod.uid
                      - k8s.pod.start_time
                      - k8s.deployment.name
                      - k8s.node.name
              receivers:
                hostmetrics:
                  collection_interval: 30s
                  scrapers:
                    cpu: { }
                    load: { }
                    memory: { }
                    disk: { }
                    filesystem: { }
                    network: { }

